/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getClassDiagramAccess().getGroup(), "rule__ClassDiagram__Group__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
					put(grammarAccess.getClassAccess().getGroup_6(), "rule__Class__Group_6__0");
					put(grammarAccess.getClassAccess().getGroup_6_3(), "rule__Class__Group_6_3__0");
					put(grammarAccess.getClassAccess().getGroup_7(), "rule__Class__Group_7__0");
					put(grammarAccess.getClassAccess().getGroup_7_3(), "rule__Class__Group_7_3__0");
					put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup_5(), "rule__Operation__Group_5__0");
					put(grammarAccess.getBooleanTypeAccess().getGroup(), "rule__BooleanType__Group__0");
					put(grammarAccess.getRealTypeAccess().getGroup(), "rule__RealType__Group__0");
					put(grammarAccess.getIntegerTypeAccess().getGroup(), "rule__IntegerType__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_5(), "rule__Enumeration__Group_5__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getCardinalitiesAccess().getGroup(), "rule__Cardinalities__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getClassDiagramAccess().getNameAssignment_2(), "rule__ClassDiagram__NameAssignment_2");
					put(grammarAccess.getClassDiagramAccess().getEntitiesAssignment_4(), "rule__ClassDiagram__EntitiesAssignment_4");
					put(grammarAccess.getClassAccess().getAbstractAssignment_1(), "rule__Class__AbstractAssignment_1");
					put(grammarAccess.getClassAccess().getNameAssignment_3(), "rule__Class__NameAssignment_3");
					put(grammarAccess.getClassAccess().getExtendsAssignment_4_1(), "rule__Class__ExtendsAssignment_4_1");
					put(grammarAccess.getClassAccess().getAttributesAssignment_6_2(), "rule__Class__AttributesAssignment_6_2");
					put(grammarAccess.getClassAccess().getAttributesAssignment_6_3_1(), "rule__Class__AttributesAssignment_6_3_1");
					put(grammarAccess.getClassAccess().getOperationsAssignment_7_2(), "rule__Class__OperationsAssignment_7_2");
					put(grammarAccess.getClassAccess().getOperationsAssignment_7_3_1(), "rule__Class__OperationsAssignment_7_3_1");
					put(grammarAccess.getAssociationAccess().getNameAssignment_2(), "rule__Association__NameAssignment_2");
					put(grammarAccess.getAssociationAccess().getCardinalitiesAssignment_5(), "rule__Association__CardinalitiesAssignment_5");
					put(grammarAccess.getAssociationAccess().getTargetclassAssignment_8(), "rule__Association__TargetclassAssignment_8");
					put(grammarAccess.getAssociationAccess().getSourceclassAssignment_11(), "rule__Association__SourceclassAssignment_11");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_3(), "rule__Attribute__TypeAssignment_3");
					put(grammarAccess.getOperationAccess().getTypeReturnAssignment_1(), "rule__Operation__TypeReturnAssignment_1");
					put(grammarAccess.getOperationAccess().getNameAssignment_2(), "rule__Operation__NameAssignment_2");
					put(grammarAccess.getOperationAccess().getParametersAssignment_4(), "rule__Operation__ParametersAssignment_4");
					put(grammarAccess.getOperationAccess().getParametersAssignment_5_1(), "rule__Operation__ParametersAssignment_5_1");
					put(grammarAccess.getEnumerationAccess().getNameAssignment_2(), "rule__Enumeration__NameAssignment_2");
					put(grammarAccess.getEnumerationAccess().getVariableAssignment_4(), "rule__Enumeration__VariableAssignment_4");
					put(grammarAccess.getEnumerationAccess().getVariableAssignment_5_1(), "rule__Enumeration__VariableAssignment_5_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_3(), "rule__Parameter__TypeAssignment_3");
					put(grammarAccess.getCardinalitiesAccess().getLowerboundAssignment_2(), "rule__Cardinalities__LowerboundAssignment_2");
					put(grammarAccess.getCardinalitiesAccess().getUpperboundAssignment_4(), "rule__Cardinalities__UpperboundAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleClassDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
