/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import smalluml.Association;
import smalluml.Attribute;
import smalluml.BooleanType;
import smalluml.Cardinalities;
import smalluml.ClassDiagram;
import smalluml.Enumeration;
import smalluml.IntegerType;
import smalluml.Operation;
import smalluml.RealType;
import smalluml.SmallumlPackage;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmallumlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmallumlPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case SmallumlPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case SmallumlPackage.BOOLEAN_TYPE:
				sequence_BooleanType(context, (BooleanType) semanticObject); 
				return; 
			case SmallumlPackage.CARDINALITIES:
				sequence_Cardinalities(context, (Cardinalities) semanticObject); 
				return; 
			case SmallumlPackage.CLASS:
				sequence_Class(context, (smalluml.Class) semanticObject); 
				return; 
			case SmallumlPackage.CLASS_DIAGRAM:
				sequence_ClassDiagram(context, (ClassDiagram) semanticObject); 
				return; 
			case SmallumlPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case SmallumlPackage.INTEGER_TYPE:
				sequence_IntegerType(context, (IntegerType) semanticObject); 
				return; 
			case SmallumlPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case SmallumlPackage.PARAMETER:
				sequence_Parameter(context, (smalluml.Parameter) semanticObject); 
				return; 
			case SmallumlPackage.REAL_TYPE:
				sequence_RealType(context, (RealType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entity returns Association
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (name=EString cardinalities=Cardinalities targetclass=[Class|EString] sourceclass=[Class|EString])
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ASSOCIATION__CARDINALITIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ASSOCIATION__CARDINALITIES));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ASSOCIATION__TARGETCLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ASSOCIATION__TARGETCLASS));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ASSOCIATION__SOURCECLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ASSOCIATION__SOURCECLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociationAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssociationAccess().getCardinalitiesCardinalitiesParserRuleCall_5_0(), semanticObject.getCardinalities());
		feeder.accept(grammarAccess.getAssociationAccess().getTargetclassClassEStringParserRuleCall_8_0_1(), semanticObject.getTargetclass());
		feeder.accept(grammarAccess.getAssociationAccess().getSourceclassClassEStringParserRuleCall_11_0_1(), semanticObject.getSourceclass());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=EString type=Type)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns BooleanType
	 *     BooleanType returns BooleanType
	 *
	 * Constraint:
	 *     {BooleanType}
	 */
	protected void sequence_BooleanType(ISerializationContext context, BooleanType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cardinalities returns Cardinalities
	 *
	 * Constraint:
	 *     (lowerbound=EInt upperbound=EInt)
	 */
	protected void sequence_Cardinalities(ISerializationContext context, Cardinalities semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.CARDINALITIES__LOWERBOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.CARDINALITIES__LOWERBOUND));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.CARDINALITIES__UPPERBOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.CARDINALITIES__UPPERBOUND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCardinalitiesAccess().getLowerboundEIntParserRuleCall_2_0(), semanticObject.getLowerbound());
		feeder.accept(grammarAccess.getCardinalitiesAccess().getUpperboundEIntParserRuleCall_4_0(), semanticObject.getUpperbound());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClassDiagram returns ClassDiagram
	 *
	 * Constraint:
	 *     (name=EString entities+=Entity*)
	 */
	protected void sequence_ClassDiagram(ISerializationContext context, ClassDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         abstract?='abstract'? 
	 *         name=EString 
	 *         extends=[Class|EString]? 
	 *         (attributes+=Attribute attributes+=Attribute*)? 
	 *         (operations+=Operation operations+=Operation*)?
	 *     )
	 */
	protected void sequence_Class(ISerializationContext context, smalluml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (name=EString variable+=EString variable+=EString*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns IntegerType
	 *     IntegerType returns IntegerType
	 *
	 * Constraint:
	 *     {IntegerType}
	 */
	protected void sequence_IntegerType(ISerializationContext context, IntegerType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (typeReturn=Type? name=EString parameters+=Parameter? parameters+=Parameter*)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString type=Type)
	 */
	protected void sequence_Parameter(ISerializationContext context, smalluml.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns RealType
	 *     RealType returns RealType
	 *
	 * Constraint:
	 *     {RealType}
	 */
	protected void sequence_RealType(ISerializationContext context, RealType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
