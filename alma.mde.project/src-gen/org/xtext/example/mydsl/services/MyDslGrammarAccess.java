/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ClassDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ClassDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ClassDiagram:
		//	{ClassDiagram}
		//	'ClassDiagram'
		//	name=EString
		//	'{'
		//	entities+=Entity*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassDiagram} 'ClassDiagram' name=EString '{' entities+=Entity* '}'
		public Group getGroup() { return cGroup; }
		
		//{ClassDiagram}
		public Action getClassDiagramAction_0() { return cClassDiagramAction_0; }
		
		//'ClassDiagram'
		public Keyword getClassDiagramKeyword_1() { return cClassDiagramKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0() { return cEntitiesEntityParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	Class | Association;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | Association
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_1() { return cAssociationParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendsClassCrossReference_4_1_0 = (CrossReference)cExtendsAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendsClassEStringParserRuleCall_4_1_0_1 = (RuleCall)cExtendsClassCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAttributesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAttributesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_6_2_0 = (RuleCall)cAttributesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cAttributesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_6_3_1_0 = (RuleCall)cAttributesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOperationsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cOperationsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOperationsOperationParserRuleCall_7_2_0 = (RuleCall)cOperationsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cOperationsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_7_3_1_0 = (RuleCall)cOperationsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Class:
		//	{Class} abstract?='abstract'?
		//	'Class'
		//	name=EString ('extends' extends=[Class|EString])?
		//	'{' ('attributes' '(' attributes+=Attribute ("," attributes+=Attribute)* ')')? ('operations' '('
		//	operations+=Operation ("," operations+=Operation)* ')')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Class} abstract?='abstract'? 'Class' name=EString ('extends' extends=[Class|EString])? '{' ('attributes' '('
		//attributes+=Attribute ("," attributes+=Attribute)* ')')? ('operations' '(' operations+=Operation (","
		//operations+=Operation)* ')')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Class}
		public Action getClassAction_0() { return cClassAction_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'Class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('extends' extends=[Class|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//extends=[Class|EString]
		public Assignment getExtendsAssignment_4_1() { return cExtendsAssignment_4_1; }
		
		//[Class|EString]
		public CrossReference getExtendsClassCrossReference_4_1_0() { return cExtendsClassCrossReference_4_1_0; }
		
		//EString
		public RuleCall getExtendsClassEStringParserRuleCall_4_1_0_1() { return cExtendsClassEStringParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('attributes' '(' attributes+=Attribute ("," attributes+=Attribute)* ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'attributes'
		public Keyword getAttributesKeyword_6_0() { return cAttributesKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_2() { return cAttributesAssignment_6_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_2_0() { return cAttributesAttributeParserRuleCall_6_2_0; }
		
		//("," attributes+=Attribute)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_3_1() { return cAttributesAssignment_6_3_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_3_1_0() { return cAttributesAttributeParserRuleCall_6_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//('operations' '(' operations+=Operation ("," operations+=Operation)* ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'operations'
		public Keyword getOperationsKeyword_7_0() { return cOperationsKeyword_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_7_2() { return cOperationsAssignment_7_2; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_7_2_0() { return cOperationsOperationParserRuleCall_7_2_0; }
		
		//("," operations+=Operation)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_7_3_1() { return cOperationsAssignment_7_3_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_7_3_1_0() { return cOperationsOperationParserRuleCall_7_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssociationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssociationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCardinalitiesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCardinalitiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCardinalitiesCardinalitiesParserRuleCall_5_0 = (RuleCall)cCardinalitiesAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTargetclassKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetclassAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetclassClassCrossReference_8_0 = (CrossReference)cTargetclassAssignment_8.eContents().get(0);
		private final RuleCall cTargetclassClassEStringParserRuleCall_8_0_1 = (RuleCall)cTargetclassClassCrossReference_8_0.eContents().get(1);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSourceclassKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cSourceclassAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cSourceclassClassCrossReference_11_0 = (CrossReference)cSourceclassAssignment_11.eContents().get(0);
		private final RuleCall cSourceclassClassEStringParserRuleCall_11_0_1 = (RuleCall)cSourceclassClassCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Association:
		//	{Association}
		//	'Association'
		//	name=EString
		//	'{'
		//	'cardinalities' cardinalities=Cardinalities ','
		//	'targetclass' targetclass=[Class|EString] ','
		//	'sourceclass' sourceclass=[Class|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Association} 'Association' name=EString '{' 'cardinalities' cardinalities=Cardinalities ',' 'targetclass'
		//targetclass=[Class|EString] ',' 'sourceclass' sourceclass=[Class|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//{Association}
		public Action getAssociationAction_0() { return cAssociationAction_0; }
		
		//'Association'
		public Keyword getAssociationKeyword_1() { return cAssociationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'cardinalities'
		public Keyword getCardinalitiesKeyword_4() { return cCardinalitiesKeyword_4; }
		
		//cardinalities=Cardinalities
		public Assignment getCardinalitiesAssignment_5() { return cCardinalitiesAssignment_5; }
		
		//Cardinalities
		public RuleCall getCardinalitiesCardinalitiesParserRuleCall_5_0() { return cCardinalitiesCardinalitiesParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'targetclass'
		public Keyword getTargetclassKeyword_7() { return cTargetclassKeyword_7; }
		
		//targetclass=[Class|EString]
		public Assignment getTargetclassAssignment_8() { return cTargetclassAssignment_8; }
		
		//[Class|EString]
		public CrossReference getTargetclassClassCrossReference_8_0() { return cTargetclassClassCrossReference_8_0; }
		
		//EString
		public RuleCall getTargetclassClassEStringParserRuleCall_8_0_1() { return cTargetclassClassEStringParserRuleCall_8_0_1; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'sourceclass'
		public Keyword getSourceclassKeyword_10() { return cSourceclassKeyword_10; }
		
		//sourceclass=[Class|EString]
		public Assignment getSourceclassAssignment_11() { return cSourceclassAssignment_11; }
		
		//[Class|EString]
		public CrossReference getSourceclassClassCrossReference_11_0() { return cSourceclassClassCrossReference_11_0; }
		
		//EString
		public RuleCall getSourceclassClassEStringParserRuleCall_11_0_1() { return cSourceclassClassEStringParserRuleCall_11_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Attribute:
		//	{Attribute} name=EString ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} name=EString ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReturnTypeParserRuleCall_1_0 = (RuleCall)cTypeReturnAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Operation:
		//	{Operation} typeReturn=Type? name=EString
		//	'(' parameters+=Parameter? ("," parameters+=Parameter)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Operation} typeReturn=Type? name=EString '(' parameters+=Parameter? ("," parameters+=Parameter)* ')'
		public Group getGroup() { return cGroup; }
		
		//{Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }
		
		//typeReturn=Type?
		public Assignment getTypeReturnAssignment_1() { return cTypeReturnAssignment_1; }
		
		//Type
		public RuleCall getTypeReturnTypeParserRuleCall_1_0() { return cTypeReturnTypeParserRuleCall_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//parameters+=Parameter?
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0() { return cParametersParameterParserRuleCall_4_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_1_0() { return cParametersParameterParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumerationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	BooleanType | RealType | IntegerType | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanType | RealType | IntegerType | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_0() { return cBooleanTypeParserRuleCall_0; }
		
		//RealType
		public RuleCall getRealTypeParserRuleCall_1() { return cRealTypeParserRuleCall_1; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_2() { return cIntegerTypeParserRuleCall_2; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_3() { return cEnumerationParserRuleCall_3; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//	{BooleanType}
		//	'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType} 'Boolean'
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}
	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RealType:
		//	{RealType}
		//	'Real';
		@Override public ParserRule getRule() { return rule; }
		
		//{RealType} 'Real'
		public Group getGroup() { return cGroup; }
		
		//{RealType}
		public Action getRealTypeAction_0() { return cRealTypeAction_0; }
		
		//'Real'
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntegerType:
		//	{IntegerType}
		//	'Integer';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} 'Integer'
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableEStringParserRuleCall_4_0 = (RuleCall)cVariableAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariableAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariableEStringParserRuleCall_5_1_0 = (RuleCall)cVariableAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Enumeration:
		//	{Enumeration}
		//	'Enumeration'
		//	name=EString
		//	'{'
		//	variable+=EString ("," variable+=EString)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Enumeration} 'Enumeration' name=EString '{' variable+=EString ("," variable+=EString)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Enumeration}
		public Action getEnumerationAction_0() { return cEnumerationAction_0; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_1() { return cEnumerationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//variable+=EString
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }
		
		//EString
		public RuleCall getVariableEStringParserRuleCall_4_0() { return cVariableEStringParserRuleCall_4_0; }
		
		//("," variable+=EString)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//variable+=EString
		public Assignment getVariableAssignment_5_1() { return cVariableAssignment_5_1; }
		
		//EString
		public RuleCall getVariableEStringParserRuleCall_5_1_0() { return cVariableEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Parameter:
		//	{Parameter} name=EString ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} name=EString ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class CardinalitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Cardinalities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCardinalitiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerboundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerboundEIntParserRuleCall_2_0 = (RuleCall)cLowerboundAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpperboundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpperboundEIntParserRuleCall_4_0 = (RuleCall)cUpperboundAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Cardinalities:
		//	{Cardinalities}
		//	'{'
		//	lowerbound=EInt ','
		//	upperbound=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Cardinalities} '{' lowerbound=EInt ',' upperbound=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//{Cardinalities}
		public Action getCardinalitiesAction_0() { return cCardinalitiesAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//lowerbound=EInt
		public Assignment getLowerboundAssignment_2() { return cLowerboundAssignment_2; }
		
		//EInt
		public RuleCall getLowerboundEIntParserRuleCall_2_0() { return cLowerboundEIntParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//upperbound=EInt
		public Assignment getUpperboundAssignment_4() { return cUpperboundAssignment_4; }
		
		//EInt
		public RuleCall getUpperboundEIntParserRuleCall_4_0() { return cUpperboundEIntParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ClassDiagramElements pClassDiagram;
	private final EntityElements pEntity;
	private final EStringElements pEString;
	private final ClassElements pClass;
	private final AssociationElements pAssociation;
	private final AttributeElements pAttribute;
	private final OperationElements pOperation;
	private final TypeElements pType;
	private final BooleanTypeElements pBooleanType;
	private final RealTypeElements pRealType;
	private final IntegerTypeElements pIntegerType;
	private final EnumerationElements pEnumeration;
	private final ParameterElements pParameter;
	private final CardinalitiesElements pCardinalities;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pClassDiagram = new ClassDiagramElements();
		this.pEntity = new EntityElements();
		this.pEString = new EStringElements();
		this.pClass = new ClassElements();
		this.pAssociation = new AssociationElements();
		this.pAttribute = new AttributeElements();
		this.pOperation = new OperationElements();
		this.pType = new TypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pRealType = new RealTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pEnumeration = new EnumerationElements();
		this.pParameter = new ParameterElements();
		this.pCardinalities = new CardinalitiesElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ClassDiagram:
	//	{ClassDiagram}
	//	'ClassDiagram'
	//	name=EString
	//	'{'
	//	entities+=Entity*
	//	'}';
	public ClassDiagramElements getClassDiagramAccess() {
		return pClassDiagram;
	}
	
	public ParserRule getClassDiagramRule() {
		return getClassDiagramAccess().getRule();
	}
	
	//Entity:
	//	Class | Association;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Class:
	//	{Class} abstract?='abstract'?
	//	'Class'
	//	name=EString ('extends' extends=[Class|EString])?
	//	'{' ('attributes' '(' attributes+=Attribute ("," attributes+=Attribute)* ')')? ('operations' '('
	//	operations+=Operation ("," operations+=Operation)* ')')?
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Association:
	//	{Association}
	//	'Association'
	//	name=EString
	//	'{'
	//	'cardinalities' cardinalities=Cardinalities ','
	//	'targetclass' targetclass=[Class|EString] ','
	//	'sourceclass' sourceclass=[Class|EString]
	//	'}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} name=EString ':' type=Type;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Operation:
	//	{Operation} typeReturn=Type? name=EString
	//	'(' parameters+=Parameter? ("," parameters+=Parameter)* ')';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Type:
	//	BooleanType | RealType | IntegerType | Enumeration;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//BooleanType:
	//	{BooleanType}
	//	'Boolean';
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//RealType:
	//	{RealType}
	//	'Real';
	public RealTypeElements getRealTypeAccess() {
		return pRealType;
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType}
	//	'Integer';
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//Enumeration:
	//	{Enumeration}
	//	'Enumeration'
	//	name=EString
	//	'{'
	//	variable+=EString ("," variable+=EString)*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter} name=EString ':' type=Type;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Cardinalities:
	//	{Cardinalities}
	//	'{'
	//	lowerbound=EInt ','
	//	upperbound=EInt
	//	'}';
	public CardinalitiesElements getCardinalitiesAccess() {
		return pCardinalities;
	}
	
	public ParserRule getCardinalitiesRule() {
		return getCardinalitiesAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
